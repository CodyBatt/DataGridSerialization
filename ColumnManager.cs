using System;
using System.Linq;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using ReactiveUI;
using ReactiveUI.Xaml;

namespace DataGridSerialization
{
    

    public class ColumnManager : Control
    {
        public static readonly int MaxContextItems = 10;

        static ColumnManager()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(ColumnManager), new FrameworkPropertyMetadata(typeof(ColumnManager)));
        }
        
        public ColumnManager()
        {
            SettingsRepository = new BlobCacheRepository();
            Application.Current.Exit += (s, e) => SaveSettings();
        }

        #region DependencyProperty: RequiredColumnId
        public static readonly DependencyProperty RequiredColumnIdProperty =
            DependencyProperty.Register("RequiredColumnId", typeof (string), typeof (ColumnManager), new PropertyMetadata(default(string)));

        public string RequiredColumnId
        {
            get { return (string) GetValue(RequiredColumnIdProperty); }
            set { SetValue(RequiredColumnIdProperty, value); }
        }
        #endregion

        #region AttachedProperty: ColumnId
        public static readonly DependencyProperty ColumnIdProperty =
            DependencyProperty.RegisterAttached("ColumnId", typeof(string), typeof(ColumnManager), new PropertyMetadata(default(string)));
        public static void SetColumnId(DataGridColumn element, string value)
        {
            element.SetValue(ColumnIdProperty, value);
        }
        public static string GetColumnId(DataGridColumn element)
        {
            return (string)element.GetValue(ColumnIdProperty);
        }
        #endregion
        #region DependencyProperty: SettingsRepository
        public static readonly DependencyProperty SettingsRepositoryProperty =
            DependencyProperty.Register("SettingsRepository", typeof(IGridSettingsRepository), typeof(ColumnManager), new PropertyMetadata(default(IGridSettingsRepository)));

        public IGridSettingsRepository SettingsRepository
        {
            get { return (IGridSettingsRepository)GetValue(SettingsRepositoryProperty); }
            set { SetValue(SettingsRepositoryProperty, value); }
        }
        #endregion
        #region DependencyProperty: ColumnSettings
        public static readonly DependencyProperty ColumnSettingsProperty =
            DependencyProperty.Register("ColumnSettings", typeof(ReactiveCollection<ColumnSettingsViewModel>), typeof(ColumnManager), new PropertyMetadata(default(ReactiveCollection<ColumnSettingsViewModel>)));

        public ReactiveCollection<ColumnSettingsViewModel> ColumnSettings
        {
            get { return (ReactiveCollection<ColumnSettingsViewModel>)GetValue(ColumnSettingsProperty); }
            set { SetValue(ColumnSettingsProperty, value); }
        }
        #endregion
        #region DependencyProperty: DataGrid
        public static readonly DependencyProperty DataGridProperty =
            DependencyProperty.Register("DataGrid", typeof (DataGrid), typeof (ColumnManager), new PropertyMetadata(DataGridChanged));
        public DataGrid DataGrid
        {
            get { return (DataGrid) GetValue(DataGridProperty); }
            set { SetValue(DataGridProperty, value); }
        }
        private static void DataGridChanged(object sender, DependencyPropertyChangedEventArgs args)
        {
            var cm = sender as ColumnManager;
            if (cm == null || cm.DataGrid == null || string.IsNullOrEmpty(cm.DataGrid.Name)) return;            
            cm.SerializationId = cm.DataGrid.Name;
            cm.LoadSettings();
            if (cm.DataGrid.AutoGenerateColumns)
            {
                cm.DataGrid.AutoGeneratingColumn += cm.DataGrid_AutoGeneratingColumns;
                cm.DataGrid.AutoGeneratedColumns += cm.DataGrid_AutoGeneratedColumns;
            }
            else
            {
                cm.HandleCustomColumns();
            }
            cm.DataGrid.Unloaded += (s, e) => cm.SaveSettings();
        }

        void DataGrid_AutoGeneratingColumns(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            // Skip IObservable<> (Changed,Changing)
            var pt = e.PropertyType;
            if (pt.IsGenericType && pt.GetGenericTypeDefinition() == typeof(IObservable<>))
            {
                e.Cancel = true;
                return;
            }
            var columnId = e.PropertyName;
            SetColumnId(e.Column, columnId);
            e.Column.Header = GetLocalizedHeader(columnId);
        }

        void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ApplyGridSettings();
        }
        #endregion
        
        #region Command: ToggleColumnVisibility
        private ICommand _pToggleColumnVisibility;
        public ICommand ToggleColumnVisibility
        {
            get
            {
                return _pToggleColumnVisibility ??
                (_pToggleColumnVisibility = new RelayCommand(
                    (param) =>
                        {
                        var vm = param as ColumnSettingsViewModel;
                        if (vm == null) return;
                        vm.Visible = !vm.Visible;
                        var col = DataGrid.Columns.FirstOrDefault(x => GetColumnId(x) == vm.Id);
                        if (col == null) return;
                        col.Visibility = vm.Visible ? Visibility.Visible : Visibility.Collapsed;
                    },
                    (param) =>
                    {
                        var vm = param as ColumnSettingsViewModel;
                        if (vm == null) return false;
                        return (vm.Id != RequiredColumnId);
                    }));
            }
        }
        #endregion        

        #region Command: EditColumnDetails
        private ICommand _pEditColumnDetails;
        public ICommand EditColumnDetails
        {
            get
            {
                return _pEditColumnDetails ??
                       (_pEditColumnDetails = new RelayCommand(
                        (param) =>
                            {
                                // EditColumnDetails Executed
                                var ctx = new GridSettingsViewModel(this);
                                var dlg = new GridSettingsDialog {DataContext = ctx};
                                var result = dlg.ShowDialog();
                                if (result.GetValueOrDefault())
                                {
                                    ctx.ApplySettings(this);
                                    ApplyGridSettings();
                                }
                            }));
            }
        }
        #endregion

        

        private string SerializationId { get; set; }
        private ColumnSort ColumnSort { get; set; }

        ColumnSettings CreateColumnSettings(DataGridColumn col)
        {
            return new ColumnSettings()
            {
                DisplayName = col.Header as string,
                Id = GetColumnId(col),
                Order = col.DisplayIndex,
                Visible = col.Visibility == Visibility.Visible,
                Width = col.ActualWidth
            };
        }

        private void LoadSettings()
        {
            var settings = SettingsRepository.Load(SerializationId);
            if (settings == null) return;
            
            ColumnSettings = new ReactiveCollection<ColumnSettingsViewModel>();
            foreach (var columnSettings in settings.ColumnSettings)
            {
                ColumnSettings.Add(new ColumnSettingsViewModel(columnSettings));
            }
            ColumnSort = settings.ColumnSort;
        }

        private void SaveSettings()
        {
            if (DataGrid == null) return;
            var settings = new GridSettings();
            foreach (var col in DataGrid.Columns)
            {
                var columnSettings = CreateColumnSettings(col);
                settings.ColumnSettings.Add(columnSettings);
                if (col.SortDirection == null) continue;

                settings.ColumnSort = new ColumnSort
                {
                    Direction = col.SortDirection.Value,
                    Index = col.DisplayIndex
                };
            }
            SettingsRepository.Save(SerializationId, settings);
        }

        private void HandleCustomColumns()
        {
            foreach (var col in DataGrid.Columns)
            {
                var boundColumn = col as DataGridBoundColumn;
                if (boundColumn == null) continue;
                var binding = boundColumn.Binding as Binding;
                if (binding == null) continue;
                var columnId = binding.Path.Path;
                SetColumnId(col, columnId);
            }
            ApplyGridSettings();
        }

        private void ApplyGridSettings()
        {
            if (ColumnSettings == null) return;
            RequiredColumnId = GetColumnId(DataGrid.Columns[0]);
            foreach (var col in DataGrid.Columns)
            {
                var columnId = GetColumnId(col);
                if (columnId == null) continue;
                var cd = ColumnSettings.FirstOrDefault(x => x.Id == columnId);
                if (cd == null)
                {
                    cd = new ColumnSettingsViewModel(CreateColumnSettings(col));
                    ColumnSettings.Add(cd);
                }
                cd.ApplyColumnSettings(col);
                cd.ApplyColumnOrdering(DataGrid.Columns.Count, col);
                cd.Required = RequiredColumnId == columnId;
            }
            if (ColumnSort != null)
            {
                DataGrid.Columns[ColumnSort.Index].SortDirection = ColumnSort.Direction;
            }
            DataGrid.ContextMenu = CreateContextMenu();
            
        }

        string GetLocalizedHeader(string columnId)
        {
            // TODO: Localize this
            return SerializationId + "_" + columnId;
        }

        private ContextMenu CreateContextMenu()
        {
            var retval = new ContextMenu();
            int maxColumns = MaxContextItems;
            foreach (var cd in ColumnSettings)
            {
                var item = new MenuItem
                    {
                        Header = cd.DisplayName,
                        DataContext = cd,
                        Command = ToggleColumnVisibility,
                        CommandParameter = cd
                    };
                var checkedBinding = new Binding("Visible");
                item.SetBinding(MenuItem.IsCheckedProperty, checkedBinding);
                retval.Items.Add(item);
                if (--maxColumns == 0) break;
            }
            if (ColumnSettings.Count > 3)
            {
                // TODO: Localize this
                var localizedMoreHeaderText = "More...";
                var editItem = new MenuItem {Header = localizedMoreHeaderText, Command = EditColumnDetails};
                retval.Items.Add(editItem);
            }
            return retval;
        }
    }
}
